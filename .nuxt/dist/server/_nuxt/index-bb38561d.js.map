{"version":3,"file":"index-bb38561d.js","sources":["../../../../modules/runtime/composables.ts","../../../../composables/send-message.ts","../../../../components/ChatRoom.vue"],"sourcesContent":["import { useNuxtApp } from \"#app\";\n\nexport function useSocket(): ReturnType<\n  typeof import(\"socket.io-client\")[\"io\"]\n> {\n  const { $socket } = useNuxtApp();\n  return $socket;\n}\n\nexport function useIO(): typeof import(\"socket.io-client\")[\"io\"] {\n  const { $io } = useNuxtApp();\n  return $io;\n}\n","import { Message } from \"~/types/message\";\nexport const onSendMessage = async (message: Message) => {\n  const data = {\n    message: msg,\n    room: room.value,\n  };\n  socket.emit(\"send:private-chat\", data);\n  return ret;\n};\n","<template>\n  <div class=\"flex justify-center\">\n\n    <div class=\"flex flex-col w-80% \">\n      <div>\n        <ConnectUserDisplay :connect-users=\"connectUsers\" />\n      </div>\n      <div class=\"contained m-3  outline  rounded-lg p-2 outline-black\">\n        <Messages />\n      </div>\n      <div>\n\n        <InputMessage @send=\"send\" />\n      </div>\n    </div>\n  </div>\n</template>\n<script setup lang=\"ts\">\nimport { message, messages, currentUser } from '~/store/store';\nimport { Message } from '~/types/message';\nimport { User } from '~/types/user';\n\nconst route = useRoute()\nconsole.log(route.params.room)\n// const user: User = ''\n\n// const { $socket } = useNuxtApp()\nconst socket = useSocket()\n\n\nconst connected = ref(false)\nconst roomStr = route.params.room.toString()\nlet room = ref(roomStr)\nlet connectUsers = ref()\n// Custom\nconst user = currentUser\n// const io = useIO()\n// const socket2 = io('http://localhost:3069')\n\nonMounted(() => {\n  socket.emit('joined-room', room.value, user)\n\n  socket.on('updated-user-list', (users: User[]) => {\n    console.log('connected users: ' + users)\n    connected.value = socket.connected\n    connectUsers.value = users\n    console.log('connected to room: ' + room.value)\n\n  })\n\n\n  socket.off('receive:private-chat')\n  type DataObj = {\n    message: Message\n  }\n  socket.on('receive:private-chat', (data: DataObj) => {\n    console.log(data)\n    console.log('data')\n    messages.value.push(data.message)\n\n  })\n  socket.on('disconnect', () => {\n    connected.value = socket.connected\n  })\n})\nonBeforeRouteLeave(() => {\n  socket.emit('leave-room', room.value, user)\n\n})\nconst send = async () => {\n  console.log('sending')\n  const from = currentUser.id\n  const date = new Date().toDateString()\n  const msg: Message = { id: `${messages.value.length + 1}`, room: room.value, text: message.value, from, date, }\n\n  await onSendMessage(msg)\n  console.log('sent')\n  message.value = ''\n\n}\n\n\n</script>\n<style>\n.contained {\n  width: 100%;\n  height: 80vh;\n  max-height: 80vh;\n  overflow-y: auto;\n}\n</style>\n"],"names":["message","socket","room"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEO,SAAS,YAEd;AACM,QAAA,EAAE,YAAY;AACb,SAAA;AACT;ACNa,MAAA,gBAAgB,OAAOA,aAAqB;AACvD,QAAM,OAAO;AAAA,IACX,SAAS;AAAA,IACT,MAAM,KAAK;AAAA,EAAA;AAEN,SAAA,KAAK,qBAAqB,IAAI;AAC9B,SAAA;AACT;;;;;ACcA,UAAM,QAAQ;AACN,YAAA,IAAI,MAAM,OAAO,IAAI;AAI7B,UAAMC,UAAS;AAGG,QAAI,KAAK;AAC3B,UAAM,UAAU,MAAM,OAAO,KAAK,SAAS;AACvC,QAAAC,QAAO,IAAI,OAAO;AACtB,QAAI,eAAe;AAEnB,UAAM,OAAO;AA8Bb,uBAAmB,MAAM;AACvB,MAAAD,QAAO,KAAK,cAAcC,MAAK,OAAO,IAAI;AAAA,IAAA,CAE3C;AACD,UAAM,OAAO,YAAY;AACvB,cAAQ,IAAI,SAAS;AACrB,YAAM,OAAO,YAAY;AACzB,YAAM,QAAO,oBAAI,KAAK,GAAE,aAAa;AACrC,OAAqB,EAAE,IAAI,GAAG,SAAS,MAAM,SAAS,CAAC,IAAI,MAAMA,MAAK,OAAO,MAAM,QAAQ,OAAO,MAAM,KAAM;AAE9G,YAAM,cAAiB;AACvB,cAAQ,IAAI,MAAM;AAClB,cAAQ,QAAQ;AAAA,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}