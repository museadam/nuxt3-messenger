import{k as p,e as t,f as o,F as h,q as y,t as g,W as b,h as n,u as i,s as d,l as D,v as w,m as B,X as R,n as N,A as V,Y as I,r as v,D as j,Z as A,$ as F}from"./entry.9c543a45.js";import{c as m,m as f,a as _}from"./store.0eda8526.js";const K={key:0,rounded:"xl",class:"pa-1",outlined:"black",color:"light-blue"},L=p({__name:"ConnectUserDisplay",props:{connectUsers:{}},setup(l){return(s,e)=>(t(),o("div",null,[s.connectUsers?(t(),o("div",K,[(t(!0),o(h,null,y(s.connectUsers,a=>(t(),o("h3",null,g(a.name)+" is Connected ",1))),256))])):b("",!0)]))}}),q={class:"text-xs"},E=p({__name:"Message",props:{msg:{}},setup(l){return(s,e)=>(t(),o(h,null,[n("div",null,[n("div",null,[n("p",q,g(s.msg.date),1)])]),n("div",null,[n("p",null,g(s.msg.text),1)])],64))}}),T={ref:"card",class:"mb-1 mx-1"},W={key:0,align:"end",rounded:"xl",class:"pa-2 px-4 rounded-br-0 m-1",bg:"green",outline:"black","text-light":""},X={key:1,rounded:"xl",align:"start",class:"pa-3 px-4 rounded-bl-0 m-1 outline-black",bg:"light-blue","text-light":""},Y=p({__name:"Messages",setup(l){return(s,e)=>{const a=E;return t(),o("div",T,[n("div",null,[(t(!0),o(h,null,y(i(f),(r,u)=>(t(),o("div",{key:u},[n("div",null,[r.from!==i(m).id?(t(),o("div",W,[d(a,{msg:r},null,8,["msg"])])):r.from===i(m).id?(t(),o("div",X,[d(a,{msg:r},null,8,["msg"])])):b("",!0)])]))),128))])],512)}}});const Z={class:"flex"},z={class:"flex"},G={__name:"InputMessage",setup(l){return(s,e)=>(t(),o("div",Z,[n("form",z,[D(n("input",{"onUpdate:modelValue":e[0]||(e[0]=a=>B(_)?_.value=a:null),class:"px-2 m-1 p-3 rounded",label:"Create a message",onKeyup:e[1]||(e[1]=R(a=>s.$emit("send"),["enter"]))},null,544),[[w,i(_)]]),n("button",{onClick:e[2]||(e[2]=N(a=>s.$emit("send"),["prevent"]))}," Send ")])]))}},H=G;function J(){const{$socket:l}=V();return l}const O=async l=>{const s={message:msg,room:room.value};return socket.emit("send:private-chat",s),ret},P={class:"flex justify-center"},Q={class:"flex flex-col w-80%"},ee={class:"contained m-3 outline rounded-lg p-2 outline-black"},se=p({__name:"ChatRoom",setup(l){const s=I();console.log(s.params.room);const e=J(),a=v(!1),r=s.params.room.toString();let u=v(r),x=v();const $=m;j(()=>{e.emit("joined-room",u.value,$),e.on("updated-user-list",c=>{console.log("connected users: "+c),a.value=e.connected,x.value=c,console.log("connected to room: "+u.value)}),e.off("receive:private-chat"),e.on("receive:private-chat",c=>{console.log(c),console.log("data"),f.value.push(c.message)}),e.on("disconnect",()=>{a.value=e.connected})}),A(()=>{e.emit("leave-room",u.value,$)});const M=async()=>{console.log("sending");const c=m.id,k=new Date().toDateString();f.value.length+1,u.value,_.value,await O(),console.log("sent"),_.value=""};return(c,k)=>{const C=L,S=Y,U=H;return t(),o("div",P,[n("div",Q,[n("div",null,[d(C,{"connect-users":i(x)},null,8,["connect-users"])]),n("div",ee,[d(S)]),n("div",null,[d(U,{onSend:M})])])])}}});const oe={__name:"index",setup(l){return(s,e)=>(t(),F(i(se)))}};export{oe as default};
